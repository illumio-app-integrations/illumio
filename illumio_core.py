import json
from abc import ABC, abstractmethod
from dataclasses import asdict, dataclass
from enum import Enum
from typing import Any, List, Union

_default = json.JSONEncoder()  # fall back to the default encoder for non-Illumio API objects


class IllumioEncoder(json.JSONEncoder):
    def default(self, o: Any) -> Any:
        return getattr(o.__class__, "to_json", _default.default)(o)


class IllumioException(Exception):
    """Superclass for exceptions generated by the Illumio API code"""


class IllumioObject(ABC):
    @abstractmethod
    def to_json(self) -> dict:
        pass


class Protocol(Enum):
    TCP = 6
    UDP = 17


def convert_protocol(protocol: Union[str, int]) -> int:
    try:
        proto = Protocol(protocol) if type(protocol) is int else Protocol[protocol.upper()]
        return proto.value
    except:
        raise IllumioException("Unknown or invalid protocol: {0}".format(protocol))


def ignore_empty_keys(o):
    return {k: v for (k, v) in o if v is not None}


@dataclass
class ServicePort(IllumioObject):
    port: int
    proto: int
    to_port: int = None
    icmp_type: int = None
    icmp_code: int = None

    def to_json(self) -> dict:
        return asdict(self, dict_factory=ignore_empty_keys)


@dataclass
class VirtualService(IllumioObject):
    name: str
    service_ports: List[ServicePort]

    def to_json(self) -> dict:
        return {
            "name": self.name,
            "service_ports": [sp.to_json() for sp in self.service_ports]
        }


__all__ = [
    'convert_protocol',
    'IllumioEncoder',
    'IllumioException',
    'ServicePort',
    'VirtualService'
]
